// Generated by Dagger (https://dagger.dev).
package prieto.fernando.template.di;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import fernando.prieto.data_remote.di.DataRemoteModule;
import fernando.prieto.data_remote.di.DataRemoteModule_ProvideSampleRemoteSourceFactory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import prieto.fernando.core.android.InjectingFragmentFactory;
import prieto.fernando.core.android.InjectingViewModelFactory;
import prieto.fernando.core.android.InjectingViewModelFactory_Factory;
import prieto.fernando.data.SampleRemoteSource;
import prieto.fernando.data.di.SampleRepositoryModule;
import prieto.fernando.data.di.SampleRepositoryModule_ProvideSampleRepositoryFactory;
import prieto.fernando.data.di.SampleRepositoryModule_ProvideSampleRepositoryToDomainModelMapperFactory;
import prieto.fernando.data.mapper.SampleRepositoryToDomainModelMapper;
import prieto.fernando.domain.SampleRepository;
import prieto.fernando.domain.di.DomainModule;
import prieto.fernando.domain.di.DomainModule_ProvideGetSampleUseCaseImplFactory;
import prieto.fernando.domain.usecase.GetSampleUseCase;
import prieto.fernando.presentation.FirstViewModel;
import prieto.fernando.presentation.FirstViewModelImpl;
import prieto.fernando.presentation.FirstViewModelImpl_Factory;
import prieto.fernando.presentation.di.PresentationModule;
import prieto.fernando.presentation.di.PresentationModule_ProvideSampleDomainToUiModelMapperFactory;
import prieto.fernando.presentation.mapper.SampleDomainToUiModelMapper;
import prieto.fernando.template.TemplateApp;
import prieto.fernando.template.ui.FirstFragment;
import prieto.fernando.template.ui.FirstFragment_Factory;
import prieto.fernando.template.ui.MainActivity;
import prieto.fernando.template.ui.MainActivity_MembersInjector;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<SampleRemoteSource> provideSampleRemoteSourceProvider;

  private Provider<SampleRepositoryToDomainModelMapper> provideSampleRepositoryToDomainModelMapperProvider;

  private Provider<SampleRepository> provideSampleRepositoryProvider;

  private Provider<GetSampleUseCase> provideGetSampleUseCaseImplProvider;

  private Provider<SampleDomainToUiModelMapper> provideSampleDomainToUiModelMapperProvider;

  private Provider<FirstViewModelImpl> firstViewModelImplProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<InjectingViewModelFactory> injectingViewModelFactoryProvider;

  private Provider<FirstFragment> firstFragmentProvider;

  private DaggerAppComponent(PresentationModule presentationModuleParam,
      DomainModule domainModuleParam, SampleRepositoryModule sampleRepositoryModuleParam,
      DataRemoteModule dataRemoteModuleParam) {

    initialize(presentationModuleParam, domainModuleParam, sampleRepositoryModuleParam, dataRemoteModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private Map<Class<? extends Fragment>, Provider<Fragment>> getMapOfClassOfAndProviderOfFragment(
      ) {
    return Collections.<Class<? extends Fragment>, Provider<Fragment>>singletonMap(FirstFragment.class, (Provider) firstFragmentProvider);}

  private InjectingFragmentFactory getInjectingFragmentFactory() {
    return new InjectingFragmentFactory(getMapOfClassOfAndProviderOfFragment());}

  @SuppressWarnings("unchecked")
  private void initialize(final PresentationModule presentationModuleParam,
      final DomainModule domainModuleParam,
      final SampleRepositoryModule sampleRepositoryModuleParam,
      final DataRemoteModule dataRemoteModuleParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivityModule_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivityModule_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.provideSampleRemoteSourceProvider = DoubleCheck.provider(DataRemoteModule_ProvideSampleRemoteSourceFactory.create(dataRemoteModuleParam));
    this.provideSampleRepositoryToDomainModelMapperProvider = SingleCheck.provider(SampleRepositoryModule_ProvideSampleRepositoryToDomainModelMapperFactory.create(sampleRepositoryModuleParam));
    this.provideSampleRepositoryProvider = SingleCheck.provider(SampleRepositoryModule_ProvideSampleRepositoryFactory.create(sampleRepositoryModuleParam, provideSampleRemoteSourceProvider, provideSampleRepositoryToDomainModelMapperProvider));
    this.provideGetSampleUseCaseImplProvider = SingleCheck.provider(DomainModule_ProvideGetSampleUseCaseImplFactory.create(domainModuleParam, provideSampleRepositoryProvider));
    this.provideSampleDomainToUiModelMapperProvider = SingleCheck.provider(PresentationModule_ProvideSampleDomainToUiModelMapperFactory.create(presentationModuleParam));
    this.firstViewModelImplProvider = FirstViewModelImpl_Factory.create(provideGetSampleUseCaseImplProvider, provideSampleDomainToUiModelMapperProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(FirstViewModel.class, (Provider) firstViewModelImplProvider).build();
    this.injectingViewModelFactoryProvider = DoubleCheck.provider(InjectingViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.firstFragmentProvider = FirstFragment_Factory.create((Provider) injectingViewModelFactoryProvider);
  }

  @Override
  public void inject(TemplateApp arg0) {
    injectTemplateApp(arg0);}

  private TemplateApp injectTemplateApp(TemplateApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  public static final class Builder {
    private PresentationModule presentationModule;

    private DomainModule domainModule;

    private SampleRepositoryModule sampleRepositoryModule;

    private DataRemoteModule dataRemoteModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder presentationModule(PresentationModule presentationModule) {
      this.presentationModule = Preconditions.checkNotNull(presentationModule);
      return this;
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }

    public Builder sampleRepositoryModule(SampleRepositoryModule sampleRepositoryModule) {
      this.sampleRepositoryModule = Preconditions.checkNotNull(sampleRepositoryModule);
      return this;
    }

    public Builder dataRemoteModule(DataRemoteModule dataRemoteModule) {
      this.dataRemoteModule = Preconditions.checkNotNull(dataRemoteModule);
      return this;
    }

    public AppComponent build() {
      if (presentationModule == null) {
        this.presentationModule = new PresentationModule();
      }
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      if (sampleRepositoryModule == null) {
        this.sampleRepositoryModule = new SampleRepositoryModule();
      }
      if (dataRemoteModule == null) {
        this.dataRemoteModule = new DataRemoteModule();
      }
      return new DaggerAppComponent(presentationModule, domainModule, sampleRepositoryModule, dataRemoteModule);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivityModule_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivityModule_BindMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivityModule_BindMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectFragmentFactory(instance, DaggerAppComponent.this.getInjectingFragmentFactory());
      return instance;
    }
  }
}
